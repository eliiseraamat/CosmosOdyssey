// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("Domain.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Domain.Leg", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PricelistId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RouteInfoId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("RouteInfoId1")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PricelistId");

                    b.HasIndex("RouteInfoId")
                        .IsUnique();

                    b.HasIndex("RouteInfoId1");

                    b.ToTable("Legs");
                });

            modelBuilder.Entity("Domain.Planet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Planets");
                });

            modelBuilder.Entity("Domain.Pricelist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Fetched")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Pricelists");
                });

            modelBuilder.Entity("Domain.Provider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FlightEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FlightStart")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LegId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LegId");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("Domain.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("TotalTravelTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Domain.ReservationProvider", b =>
                {
                    b.Property<Guid>("ReservationProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("TEXT");

                    b.HasKey("ReservationProviderId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("ReservationId");

                    b.ToTable("ReservationProviders");
                });

            modelBuilder.Entity("Domain.RouteInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Distance")
                        .HasColumnType("REAL");

                    b.Property<Guid>("FromId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ToId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.ToTable("RouteInfos");
                });

            modelBuilder.Entity("Domain.Leg", b =>
                {
                    b.HasOne("Domain.Pricelist", "Pricelist")
                        .WithMany("Legs")
                        .HasForeignKey("PricelistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.RouteInfo", "RouteInfo")
                        .WithOne()
                        .HasForeignKey("Domain.Leg", "RouteInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.RouteInfo", null)
                        .WithMany("Legs")
                        .HasForeignKey("RouteInfoId1");

                    b.Navigation("Pricelist");

                    b.Navigation("RouteInfo");
                });

            modelBuilder.Entity("Domain.Provider", b =>
                {
                    b.HasOne("Domain.Company", "Company")
                        .WithMany("Providers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Leg", "Leg")
                        .WithMany("Providers")
                        .HasForeignKey("LegId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Leg");
                });

            modelBuilder.Entity("Domain.ReservationProvider", b =>
                {
                    b.HasOne("Domain.Provider", "Provider")
                        .WithMany("ReservationProviders")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Reservation", "Reservation")
                        .WithMany("ReservationProviders")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("Domain.RouteInfo", b =>
                {
                    b.HasOne("Domain.Planet", "From")
                        .WithMany("LegsFrom")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Planet", "To")
                        .WithMany("LegsTo")
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("Domain.Company", b =>
                {
                    b.Navigation("Providers");
                });

            modelBuilder.Entity("Domain.Leg", b =>
                {
                    b.Navigation("Providers");
                });

            modelBuilder.Entity("Domain.Planet", b =>
                {
                    b.Navigation("LegsFrom");

                    b.Navigation("LegsTo");
                });

            modelBuilder.Entity("Domain.Pricelist", b =>
                {
                    b.Navigation("Legs");
                });

            modelBuilder.Entity("Domain.Provider", b =>
                {
                    b.Navigation("ReservationProviders");
                });

            modelBuilder.Entity("Domain.Reservation", b =>
                {
                    b.Navigation("ReservationProviders");
                });

            modelBuilder.Entity("Domain.RouteInfo", b =>
                {
                    b.Navigation("Legs");
                });
#pragma warning restore 612, 618
        }
    }
}
